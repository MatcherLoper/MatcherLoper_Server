buildscript {
    ext {
        springBootVersion = '2.3.4.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:1.0.9.RELEASE"
        classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.10"
    }
}

def javaProjects = [project(":matcherloper-common"), project(":matcherloper-core"), project(":matcherloper-auth"),
                    project(":matcherloper-web"), project(":matcherloper-event"), project("matcherloper-matching")]

configure(javaProjects) {
    apply plugin: "java"
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group 'com.toy'
    version '0.0.1-SNAPSHOT'

    sourceCompatibility = '1.8'

    repositories {
        mavenCentral()
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
        testCompile group: 'org.assertj', name: 'assertj-core', version: '3.6.1'
    }

    test {
        useJUnitPlatform() {}
    }
}

def springProjects = [project(":matcherloper-core"), project(":matcherloper-web"), project(":matcherloper-auth"),
                      project(":matcherloper-event"), project(":matcherloper-matching"),]

configure(springProjects) {

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
}

def queryDslProjects = [project(":matcherloper-core"), project(":matcherloper-web")]

configure(queryDslProjects) {
    apply plugin: "com.ewerk.gradle.plugins.querydsl"

    dependencies {
        compile 'com.querydsl:querydsl-jpa'
    }

    def querydslDir = "$buildDir/generated/querydsl"

    querydsl {
        jpa = true
        querydslSourcesDir = querydslDir
    }
    sourceSets {
        main.java.srcDir querydslDir
    }
    configurations {
        querydsl.extendsFrom compileClasspath
    }
    compileQuerydsl {
        options.annotationProcessorPath = configurations.querydsl
    }
}
